Phase 2: Parser
* In parser.ssl, made the following changes according to scan.ssl:
   * Under the Input section, added pUsing, pVal, pDef, pUnless, pElsif, pBreak, pWhen, pModule, changed the lastKeywordToken to pModule too
   * Under the Input section, removed the pColonEquals PT syntax token
   * Under the Input section, added the output token for %, !, ?, $, and #


1. Token Definitions
* Removed the old PT parser output tokens sRepeatStmt and sRepeatEnd
* Added the new Quby parser output tokens sPublic, sModule, sDoStmt, sBreakIf, sSubstring, sLength and sIndex.
2. Programs
* In parser.ssl, under Program rules, ‘program’ was changed to ‘using’
* Under Block rules, ‘begin’ after the for loop was removed (no longer requires 'begin' keyword), along with @BeginStmt. Added ‘@Statement’ at the end.
* Under Statement rules, .sBegin is added at the start, ‘begin’ and ‘repeat’ choice was removed because they are old tokens. .sEnd is added at the end of the statement.
* ​​Removed @BeginStmt rule as they are no longer relevant in Quby. Edited @Statement rule to cater to the removal of @BeginStmt: added for loop and exit condition. Changed the main loop of the Statement rule to accept a sequence of any number of declarations or statements in any order.
3. Declarations
* The parsing of constant, type and variable declarations was modified to meet the specifications of Quby language. 
* In parser.ssl, under Block rules, ‘const’ was changed to ‘val’, so that ‘val’ can be accepted instead of ‘const’.
4. Routines (Procedures)
* In parser.ssl, under Block rules,‘procedure’ was changed to ‘def’
* ‘def’ part is added so Quby routine can be parsing, if it detect pstar, the function will be recognized as public, and .sPublic should be emitted.
* Like Program, under Statement rules, .sBegin is added at the start, and .sEnd is added at the end of the statement.
5. Modules
* In parser.ssl, under Block rules, add ‘mod’ so Quby module declaration can be parsing.
* .sModule is added at the start shows where the module begins.
* Like Program, under Statement rules, .sBegin is added at the start, and .sEnd is added at the end of the statement.
* ‘end’ is added to match the format.
6. Statements
* Removed the old PT parser statement case, while, repeat.
* Added the new Quby parser statement unless, case
* Add a loop for Statement so Quby can process multiple statements
7. Unless Statements
* In parser.ssl, a rule called UnlessStmt is added right behind IfStmt. It can be called by Statement when an ‘unless’ is detected. The branch has been added into the loop inside Statement.
* The general idea is to take unless as ‘if not’.
* Almost the same with IfStmt, except for an sNot is emitted before expression ends.
8. Case Statements
* In parser.ssl, the CaseStmt has been edited.
* Calls CaseAlternative  at each branch. This has also been edited to recognize 
values such as integers. Also, everytime a then is detected, an sthen is emitted and block is called.
* In the loop, if an ‘else’ is detected, an sElse is emitted and then Block is called, which is quite similar to what the compiler should do in an if-else clause.
* Given that a branch starting with else should be the last one of a case statement, the compiler exits the loop after Statement is called.
9. Elsif Clauses
* In parser.ssl, the IfStmt has been changed.
* In the if statement, the plan (b) has been chosen, which means else if was added.
10. Do Statement
* In parser.ssl, the DoStmt has been added.
* The Do statement includes 'break if' as a condition. 
11. The string Type
* '?' was added as .sIndex to Term. 
* '$' was added as .sSubString to a new precedence level named SubString. 
* '#' was added as .sLength to Factor.


.
Phase 1: Scanner


1. Keywords
* In stdIdentifiers file, old PT syntax tokens were removed (not, until, program, const, procedure, begin and repeat). Then the new PT syntax tokens were added (using, val, def, unless, elsif, break, when and module).
* In scan.ssl, under the Output keyword section, the old PT Pascal output tokens were removed (pNot, pUntil, pProgram, pConst, pProcedure, pBegin and pRepeat). Then the new PT Pascal output tokens were added (pUsing, pVal, pDef, pUnless, pElsif, pBreak, pWhen and pModule).
* In the stdIdentifiers file, the old PT predefined identifier was removed (char) and the new Quby predefined identifier was added at line 46 (String)


2. Character Classes
* In the file scan.ssl, the Input character class has added characters %, !, ?, $, #. Each of these characters are represented by lPercent, lExclamation, lQuestion, lDollar, and lHash, respectively, and each line has added a comment.
* In the file parser.pt, the program ScannerParser has added five input tokens. They are lPercent (20), lExclamation (21), lQuestion (22), lDollar (23), and lHash (24). In addition, the quote on line 423 has changed from ‘‘’’ to ‘“”’. Finally, the charClassMap for the above five characters has also been added to the file parser.pt.


3. Syntax Tokens
* In scan.ssl, under the Output keyword section >> Non-compound tokens, the PT syntax token pColonEquals was removed and the PT syntax token pDoubleEquals was added. The new Quby syntax symbols were added too (pNot, pQuestion, pDollar, pHash).
* In parser.pt file, under ‘procedure Initialize;’, charClassMap functions were added for (‘!’, ‘?’, ‘$’, ‘#’).
* In scan.ssl the old pNotEqual syntax ‘<>’ was replaced by the new pNotEqual syntax ‘!=’.
* In scan.ssl, under rules for Scan, there was a choice for ‘!’ added, where if ‘!=’ was detected, .pNotEqual would be outputted, else .pNot would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘?’ added, if detected, .pQuestion would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘$’ added, if detected, .pDollar would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘#’ added, if detected, .pHash would be outputted.
* In scan.ssl, under rules for Scan, choice for ‘<’ then ‘>’ was removed, being unable to identify ‘<>’ as .pNotEqual.
* In parser.pt file, the {copied from scan.def} part was replaced by new contents from scan.def as there had been new edits made to the scan.def file.
* In test/syntaxTokens folder contains the documentation, input files and bash files.


4. String Literals
* In parser.pt, the value of quote, which was ‘’’ before, is now replaced by ‘“‘. By doing so, PT’s single-quoted char is replaced by Quby’s double-quoted string.
* Several pt code examples are tested, including normal string and empty string. 2 kinds of errors are also considered, one is a string including2 lines, the other is a string not closed. Besides, there is also a program to prove char is removed.


5. Comments
* In scan.ssl, the comment block has been edited. As Quby only accepts single-line comments, this loop will simply consume every token, until it encounters with an lNewline. By the end of a line, it exits without saving anything.
* In scan.ssl and parser.pt, lPercent is added, because Quby uses ‘%’ to label a comment.
* In the scan block of scan.ssl, 2 choices have been edited. For PT, when detecting ‘{‘, it should call Comment, while for Quby, when encountered with ‘%’, the Comment edited before should be called. Also, as the (**) format comment is no longer accepted, when detecting ‘(‘, it should simply emit pLeftParen without any condition.
* The test for new comment is included in a string test.
* 2 more examples are included to prove the old pt comments have been removed.