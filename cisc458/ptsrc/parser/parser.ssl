%  PT Parser Version 5.1
%
% Date:  30 Jun 1980
%        (Revised v5.1 - 8 Feb 2021)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pDiv                    'div'
        firstKeywordToken = pDiv
        pMod                    'mod'
        pOr                     'or'
        pAnd                    'and'
        %% REMOVED
        %pNot                    'not'
        %%
        pThen                   'then'
        pElse                   'else'
        pOf                     'of'
        pEnd                    'end'
        %% REMOVED
        %pUntil                  'until'
        %%
        pDo                     'do'
        pArray                  'array'
        pFile                   'file'
        %% REMOVED
        %pProgram                'program'
        %pConst                  'const'
        %%
        pVar                    'var'
        pType                   'type'
        %% REMOVED
        %pProcedure              'procedure'
        %pBegin                  'begin'
        %%
        pIf                     'if'
        pCase                   'case'
        pWhile                  'while'
        %% REMOVED
        %pRepeat                 'repeat'
        %%
        %% ADDED
        pUsing                  'using'
        pVal                    'val'
        pDef                    'def'
        pUnless                 'unless'
        pElsif                  'elsif'
        pBreak                  'break'
        pWhen                   'when'
        pModule                 'module'
        %%
        lastKeywordToken = pModule 

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        %% REMOVED
        %pColonEquals            ':='
        %%
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '='
        %% REMOVED
        %pNotEqual               '<>'
        %%
        %% ADDED
        pNotEqual               '!='
        %%
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        pDotDot                 '..'
        %% ADDED
        pLeftBrace              '}'
        pRightBrace             '{'
        pDoubleEquals           '=='
        pNot                    '!'
        pQuestion               '?'
        pDollar                 '$'
        pHash                   '#'
        %%
        lastSyntaxToken = pHash;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sType
        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        %% REMOVED
        %sRepeatStmt
        %sRepeatEnd
        %%
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine
        sEndOfFile
        %% ADDED
        sPublic
        sModule
        sDoStmt
        sBreakIf
        sSubstring
        sLength
        sIndex
        %%
        lastSemanticToken = sIndex;


rules

Program :
        %% REMOVED
        %'program'  .sProgram
        %%
        %% ADDED
        'using'  .sProgram
        %%

        % program name
        % pIdentifier
        % program parameters
        %% REMOVED
        %'('
        %%
        {
            pIdentifier  .sIdentifier
            [
                | ',':
                | *:
                    >
            ]
        }
        %% REMOVED
        %')'
        %%
        .sParmEnd

        %% REMOVED
        %';'  @Block  '.';
        %%
        %% ADDED
        @Block;
        %%


Block :
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.

        %% ADDED
        .sBegin
        %%
        {[
            | 'val':
                .sConst
                @ConstantDefinitions
            | 'type':
                .sType
                @TypeDefinitions
            | 'var':
                .sVar
                @VariableDeclarations
            %% REMOVED
            %| 'procedure':
            %    .sProcedure
            %    % procedure name
            %    pIdentifier  .sIdentifier
            %    @ProcedureHeading
            %    @Block  ';'
            %%
            %% ADDED
            | 'def':
                .sProcedure
                % procedure name
                [
                    | pStar:
                        pIdentifier  .sIdentifier   .sPublic
                    | *:
                        pIdentifier  .sIdentifier
                ]
                @ProcedureHeading
                @Block
                'end'
            %%
            %% ADDED
            | pIdentifier:
                @AssignmentOrCallStmt
            | 'if':
                @IfStmt
                'end'
            | 'while':
                @WhileStmt
            | 'case':
                @CaseStmt
            | 'do':
                @DoStmt
            | 'unless':
                @UnlessStmt
            | 'module':
                .sModule
                pIdentifier .sIdentifier
                @Block
                'end'
            | ';' :
                .sNullStmt
            %% REMOVED
            % | *:
            %    .sNullStmt 
            %%
            | *:
               >
        ]}
        %% REMOVED
        %'begin'
        %@BeginStmt;
        %% 

        %% ADDED
        .sEnd ;
        %%

ConstantDefinitions :
        % Accept one or more named constant definitions
        pIdentifier  .sIdentifier

        %% REMOVED
        % '=' @ConstantValue ';' ;
        %{[
        %    | pIdentifier:
        %        .sIdentifier
        %        '=' @ConstantValue ';'
        %    | *:
        %        >
        %]};
        %%

        %% ADDED
        '=' @ConstantValue ;
        %%

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

TypeDefinitions :
        % Accept one or more named type definitions.
        pIdentifier  .sIdentifier

        %% ADDED
        ':' @TypeBody ;
        %%

        %% REMOVED
        %'='  @TypeBody  ';'
        %{[
        %    | pIdentifier:
        %        .sIdentifier
        %        '='  @TypeBody  ';'
        %    | *:
        %        >
        %]};

TypeBody :
        [
            | 'array':
                .sArray
                '['  @SimpleType  ']'
                'of'  @SimpleType
            | 'file':
                .sFile
                'of'  @SimpleType
            | *:
                @SimpleType
        ];

SimpleType :
        % A simple type is a named type (possibly predefined)
        % or a subrange type specification
        [
            | pIdentifier:
                .sIdentifier
                [
                    | '..':
                        .sRange         %% this may be unnecessary
                        @OptionallySignedIntegerConstant
                    | *:
                ]
            | *:
                @OptionallySignedIntegerConstant
                '..'  .sRange
                @OptionallySignedIntegerConstant
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more variable declarations.
        pIdentifier  .sIdentifier

        %% ADDED
        {[
            | ',':
                pIdentifier .sVar .sIdentifier
            | *:
                >
        ]}
        ':' @TypeBody ;
        %%

        %% REMOVED
        %':'  @TypeBody  ';'
        %{[
        %    | pIdentifier:
        %        .sIdentifier
        %        ':'  @TypeBody  ';'
        %    | *:
        %        >
        %]};
        %%

ProcedureHeading :
        %% ADDED
        '('
        %%

        % Accept zero or more procedure formal parameter declarations.
        %% REMOVED
        %[
        %    | '(':
        %%
                {
                    % formal parameter identifier
                    [
                        %% ADDED
                        | ')':
                            .sParmEnd
                            >>
                        %%
                        | 'var':
                            pIdentifier  .sIdentifier
                            .sVar
                        | *:
                            pIdentifier  .sIdentifier
                    ]
                    ':'
                    % type identifier
                    pIdentifier  .sIdentifier
                    [
                        %% REMOVED
                        % | ';':
                        % | *:
                        %    >
                        %%
                        %% ADDED
                        | ',':
                        | ')':
                            >
                        %%
                    ]
                }
        %% REMOVED
        %        ')'
        %    | *:
        %]
        %';'
        %%
        .sParmEnd;

%% REMOVED
%Statement :
%        [
%            | pIdentifier:
%                @AssignmentOrCallStmt
%            | 'begin':
%                @BeginStmt
%            | 'if':
%                @IfStmt
%            | 'while':
%                @WhileStmt
%            | 'case':
%                @CaseStmt
%            | 'repeat':
%                @RepeatStmt
%            | *:
%                .sNullStmt
%        ];
%%

AssignmentOrCallStmt :
        [
            %% REMOVED
            %%| ':=':
            %%
            %% ADDED
            | '=':
            %%
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                %% REMOVED
                %']'  ':='
                %%
                %% ADDED
                ']'  '='
                %%
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                %% ADDED
                [
                    | ')':
                        .sParmEnd
                        >>
                    | *:
                ]
                %%
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            %% REMOVED
            %| *:        % no actual parameters
            %%
        ]
        .sParmEnd;

%% REMOVED
%BeginStmt :
%        .sBegin
%        {
%            @Statement
%            [
%                | ';':
%                | 'end':
%                    .sEnd
%                    >
%            ]
%        };
%%

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        'then'  .sThen
        
        %% REMOVED
        %@Statement
        %%
        %% ADDED
        @Block
        %%
        [
            | 'else':
                .sElse
                %% REMOVED
                %@Statement
                %%
                %% ADDED
                @Block
                %%
            %% ADDED
            | 'elsif':
                .sElse
                .sBegin
                @IfStmt
                .sEnd
            %%
            | *:
        ] ;

CaseStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd

        %% REMOVED
        %'of'
        %%

        {[
            %% ADDED
            | 'when':
                @CaseAlternative
            | 'else':
                .sLabelEnd
                @Block
                'end'
                >
            %%

            | ';':
                % since case alternatives cannot be null, allow
                % for the common situation of an extra semicolon
                % at the end of the list of case alternatives.
                [
                    | 'end':
                        >
                    | *:
                        @CaseAlternative
                ]
            | 'end':
                >
        ]}
        .sCaseEnd;

CaseAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants
        {
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        .sLabelEnd
        %% REMOVED
        %':'  @Statement;
        %%
        %% ADDED
        'then' @Block;
        %%

%% ADDED
UnlessStmt :
        .sIfStmt
        @Expression
        .sNot
        .sExpnEnd
        'then' .sThen
        @Block
        'end';
%%

%% ADDED
DoStmt :
        .sDoStmt
        @Block
        'break' 'if' .sBreakIf
        @Expression
        .sExpnEnd
        @Block
        'end' ;
%%

WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        'do'
        %% REMOVED
        %@Statement;
        %%
        %% ADDED
        @Block
        'end' ;
        %%

%% REMOVED
%RepeatStmt :
%        .sRepeatStmt
%        {
%            @Statement
%            [
%                | ';':
%                | 'until':
%                    .sRepeatEnd
%                    >
%            ]
%        }
%        @Expression
%        .sExpnEnd;
%%

Expression :
        @SimpleExpression
        [
            %% REMOVED
            | '=':
            %%
            %% ADDED
            | '==':
            %%
                @SimpleExpression  .sEq
            %% REMOVED
            %| '<>':
            %%
            %% ADDED
            | '!=':
            %%
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
            | *:
                >
        ]};

Term :
        %% REMOVED
        %@Factor
        %%
        %% ADDED
        @Term2
        %%
        {[
            | '*':
                %% REMOVED
                %@Factor  .sMultiply
                %%
                %% ADDED
                @Term2  .sMultiply
                %%
            | 'div':
                %% REMOVED
                %@Factor  .sDivide
                %%
                %% ADDED
                @Term2  .sDivide
                %%
            | 'mod':
                %% REMOVED
                %@Factor  .sModulus
                %%
                %% ADDED
                @Term2  .sModulus
                %%
            | 'and':
                %% REMOVED
                %.sInfixAnd  @Factor  .sAnd
                %%
                %% ADDED
                .sInfixAnd  @Term2  .sAnd
                %%
            %% ADDED
            | '?':
                @Term2 .sIndex
            %%
            | *:
                >
        ]};

%% ADDED
Term2 :
        @Factor
        {[
            | '$':
                @Factor
                '..'
                @Factor
                .sSubstring
            | *:
                >
        ]};
%%

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            %% REMOVED
            %| 'not':
            %%
            %% ADDED
            | '!':
            %%
                @Factor
                .sNot
            %% ADDED
            | '#':
                @Factor 
                .sLength
            %%
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end