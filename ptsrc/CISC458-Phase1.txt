1. Keywords
* In stdIdentifiers file, old PT syntax tokens were removed (not, until, program, const, procedure, begin and repeat). Then the new PT syntax tokens were added (using, val, def, unless, elsif, break, when and module).
* In scan.ssl, under the Output keyword section, the old PT Pascal output tokens were removed (pNot, pUntil, pProgram, pConst, pProcedure, pBegin and pRepeat). Then the new PT Pascal output tokens were added (pUsing, pVal, pDef, pUnless, pElsif, pBreak, pWhen and pModule).
* In the stdIdentifiers file, the old PT predefined identifier was removed (char) and the new Quby predefined identifier was added at line 46 (String)


2. Character Classes
* In the file scan.ssl, the Input character class has added characters %, !, ?, $, #. Each of these characters are represented by lPercent, lExclamation, lQuestion, lDollar, and lHash, respectively, and each line has added a comment.
* In the file parser.pt, the program ScannerParser has added five input tokens. They are lPercent (20), lExclamation (21), lQuestion (22), lDollar (23), and lHash (24). In addition, the quote on line 423 has changed from ‘‘’’ to ‘“”’. Finally, the charClassMap for the above five characters has also been added to the file parser.pt.


3. Syntax Tokens
* In scan.ssl, under the Output keyword section >> Non-compound tokens, the PT syntax token pColonEquals was removed and the PT syntax token pDoubleEquals was added. The new Quby syntax symbols were added too (pNot, pQuestion, pDollar, pHash).
* In parser.pt file, under ‘procedure Initialize;’, charClassMap functions were added for (‘!’, ‘?’, ‘$’, ‘#’).
* In scan.ssl the old pNotEqual syntax ‘<>’ was replaced by the new pNotEqual syntax ‘!=’.
* In scan.ssl, under rules for Scan, there was a choice for ‘!’ added, where if ‘!=’ was detected, .pNotEqual would be outputted, else .pNot would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘?’ added, if detected, .pQuestion would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘$’ added, if detected, .pDollar would be outputted.
* In scan.ssl, under rules for Scan, there was a choice for ‘#’ added, if detected, .pHash would be outputted.
* In scan.ssl, under rules for Scan, choice for ‘<’ then ‘>’ was removed, being unable to identify ‘<>’ as .pNotEqual.
* In parser.pt file, the {copied from scan.def} part was replaced by new contents from scan.def as there had been new edits made to the scan.def file.
* In test/syntaxTokens folder contains the documentation, input files and bash files.


4. String Literals
* In parser.pt, the value of quote, which was ‘’’ before, is now replaced by ‘“‘. By doing so, PT’s single-quoted char is replaced by Quby’s double-quoted string.
* Several pt code examples are tested, including normal string and empty string. 2 kinds of errors are also considered, one is a string including2 lines, the other is a string not closed. Besides, there is also a program to prove char is removed.


5. Comments
* In scan.ssl, the comment block has been edited. As Quby only accepts single-line comments, this loop will simply consume every token, until it encounters with an lNewline. By the end of a line, it exits without saving anything.
* In scan.ssl and parser.pt, lPercent is added, because Quby uses ‘%’ to label a comment.
* In the scan block of scan.ssl, 2 choices have been edited. For PT, when detecting ‘{‘, it should call Comment, while for Quby, when encountered with ‘%’, the Comment edited before should be called. Also, as the (**) format comment is no longer accepted, when detecting ‘(‘, it should simply emit pLeftParen without any condition.
* The test for new comment is included in a string test.
* 2 more examples are included to prove the old pt comments have been removed.